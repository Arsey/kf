@function strip-units($number) {
    @return $number / ($number * 0 + 1);
}


// mixin for animation
@mixin animation ($delay, $duration, $name, $iteration-count) {
    -webkit-animation-delay: $delay;
    -webkit-animation-duration: $duration;
    -webkit-animation-name: $name;
    -webkit-animation-iteration-count: $iteration-count;
    -webkit-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

    -moz-animation-delay: $delay;
    -moz-animation-duration: $duration;
    -moz-animation-name: $name;
    -moz-animation-iteration-count: $iteration-count;
    -moz-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

    -o-animation-delay: $delay;
    -o-animation-duration: $duration;
    -o-animation-name: $name;
    -o-animation-iteration-count: $iteration-count;
    -o-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

    -ms-animation-delay: $delay;
    -ms-animation-duration: $duration;
    -ms-animation-name: $name;
    -ms-animation-iteration-count: $iteration-count;
    -ms-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

    animation-delay: $delay;
    animation-duration: $duration;
    animation-name: $name;
    animation-iteration-count: $iteration-count;
    animation-fill-mode: forwards; /* this prevents the animation from restarting! */
}


@mixin tint($color,$power){
    background-color:$color;
    &>img{ opacity:1 - $power;}
}


// mixin retina
@mixin image-retina($image,$type){
    background-image: image-url(#{$image+"."+$type});
@media
    only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (   min--moz-device-pixel-ratio: 2),
    only screen and (   -o-min-device-pixel-ratio: 2/1),
    only screen and (        min-device-pixel-ratio: 2),
    only screen and (           min-resolution: 192dpi),
    only screen and (            min-resolution: 2dppx){ 
        background-image: image-url(#{$image+"_2x."+$type});
background-size: auto image-height(#{$image+"."+$type});
}
}
@mixin image-retina-only($image,$type,$sizeX,$sizeY){
    @media
        only screen and (-webkit-min-device-pixel-ratio: 2),
        only screen and (   min--moz-device-pixel-ratio: 2),
        only screen and (   -o-min-device-pixel-ratio: 2/1),
        only screen and (        min-device-pixel-ratio: 2),
        only screen and (           min-resolution: 192dpi),
        only screen and (            min-resolution: 2dppx){
            background-image: image-url(#{$image+"_2x."+$type});
    background-size: $sizeX $sizeY;
}
}

@function em($b,$n){
    @return ($n / $b)*1em;

}

@mixin svg($image,$fontsize:false){
    background-image: image-url($image+'.svg');
    @media only screen and (max-width: 1023px){
        @if $fontsize != false {
            background-size:em($fontsize,image-width($image+'.png')) em($fontsize, image-height($image+'.png')) ;
        } @else{
            background-size:emCalc(image-width($image+'.png'));
        }
    }
    .no-svg &{
        background-image: image-url($image+'.png');
    }
}




$default-has-layout-approach:zoom; 
$legacy-support-for-ie:false;
$hide-text-direction:left;
$imgpath:"../img";

@mixin pie-clearfix {
    &:after {
        content: "";
        display: table;
        clear: both; 
    }
    @include has-layout; 
}
@mixin has-layout($approach: $default-has-layout-approach) {
    @if $legacy-support-for-ie {
        @if $approach == zoom {
            @include has-layout-zoom; }
        @else if $approach == block {
            @include has-layout-block; }
        @else {
            @warn "Unknown has-layout approach: #{$approach}";
            @include has-layout-zoom; 
        } 
    } 
}
@mixin has-layout-zoom {
    @if $legacy-support-for-ie6 or $legacy-support-for-ie7 {
        *zoom: 1; 
    } 
}
@mixin has-layout-block {
    @if $legacy-support-for-ie {
        // This makes ie6 get layout
        display: inline-block;
        // and this puts it back to block
        & {
            display: block; 
        } 
    }  
}



@mixin hide-text($direction: $hide-text-direction) {
    @if $direction == left {
        $approximate-em-value: 12px / 1em;
        $wider-than-any-screen: -9999em;
        text-indent: $wider-than-any-screen * $approximate-em-value;
        overflow: hidden;
        text-align: left; }
    @else {
        // slightly wider than the box prevents issues with inline-block elements
        text-indent: 110%;
        white-space: nowrap;
        overflow: hidden; } 
}


@function image-url($path){
    @return url(#{$imgpath + '/' + $path});
}


// It strips the unit of measure and returns it
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

// Converts "px" to "em" using the ($)em-base
@function convert-to-em($value, $base-value: $em-base)  {
    $value: strip-unit($value) / strip-unit($base-value) * 1em;
    @if ($value == 0em) { $value: 0; } // Turn 0em into 0
    @return $value;
}

// Working in ems is annoying. Think in pixels by using this handy function, em-calc(#)
// Just enter the number, no need to mention "px"
@function em-calc($values, $base-value: $em-base) {
    $max: length($values); // Get the total number of parameters passed

    // If there is only 1 parameter, then return it as an integer.
    // This is done because a list can't be multiplied or divided even if it contains a single value
    @if $max == 1 { @return convert-to-em(nth($values, 1), $base-value); }

    $emValues: (); // This will eventually store the converted $values in a list
    @for $i from 1 through $max {
        $emValues: append($emValues, convert-to-em(nth($values, $i), $base-value));
    }
    @return $emValues;
}


//Retaining this for backward compatability
@function emCalc($pxWidth) {
    @return $pxWidth / $em-base * 1em;
}








